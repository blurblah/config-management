/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ai.gantry.configmanagement.api;

import ai.gantry.configmanagement.model.Error;
import ai.gantry.configmanagement.model.Record;
import ai.gantry.configmanagement.model.Zone;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-07-27T16:19:55.143+09:00[Asia/Seoul]")
@Api(value = "Dns", description = "the Dns API")
public interface DnsApi {

    @ApiOperation(value = "Zone 리스트 조회", nickname = "zonesGet", notes = "", response = Zone.class, responseContainer = "List", tags={ "dns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Zone.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class) })
    @RequestMapping(value = "/zones",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Zone>> zonesGet();


    @ApiOperation(value = "Zone 생성", nickname = "zonesPost", notes = "", response = Zone.class, tags={ "dns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Zone.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class) })
    @RequestMapping(value = "/zones",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Zone> zonesPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Zone body
) throws Exception;


    @ApiOperation(value = "Zone 삭제", nickname = "zonesZoneDelete", notes = "", tags={ "dns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/zones/{zone}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> zonesZoneDelete(@ApiParam(value = "zone name",required=true) @PathVariable("zone") String zone
) throws Exception;


    @ApiOperation(value = "Zone 조회", nickname = "zonesZoneGet", notes = "", response = Zone.class, tags={ "dns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Zone.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/zones/{zone}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Zone> zonesZoneGet(@ApiParam(value = "zone name",required=true) @PathVariable("zone") String zone
) throws Exception;


    @ApiOperation(value = "Record 리스트 조회", nickname = "zonesZoneRecordsGet", notes = "", response = Record.class, responseContainer = "List", tags={ "dns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Record.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class) })
    @RequestMapping(value = "/zones/{zone}/records",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Record>> zonesZoneRecordsGet(@ApiParam(value = "zone name",required=true) @PathVariable("zone") String zone
) throws Exception;


    @ApiOperation(value = "Record 생성", nickname = "zonesZoneRecordsPost", notes = "", response = Record.class, tags={ "dns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Record.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class) })
    @RequestMapping(value = "/zones/{zone}/records",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Record> zonesZoneRecordsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Record body
,@ApiParam(value = "zone name",required=true) @PathVariable("zone") String zone
,@ApiParam(value = "record name",required=true) @PathVariable("record") String record
);


    @ApiOperation(value = "Record 삭제", nickname = "zonesZoneRecordsRecordDelete", notes = "", tags={ "dns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/zones/{zone}/records/{record}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> zonesZoneRecordsRecordDelete(@ApiParam(value = "zone name",required=true) @PathVariable("zone") String zone
,@ApiParam(value = "record name",required=true) @PathVariable("record") String record
);


    @ApiOperation(value = "Record 정보 조회", nickname = "zonesZoneRecordsRecordGet", notes = "", response = Record.class, tags={ "dns", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Record.class),
            @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
            @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/zones/{zone}/records/{record}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Record> zonesZoneRecordsRecordGet(@ApiParam(value = "zone name",required=true) @PathVariable("zone") String zone
,@ApiParam(value = "record name",required=true) @PathVariable("record") String record
,@NotNull @ApiParam(value = "record type", required = true) @Valid @RequestParam(value = "type", required = true) String type
) throws Exception;


    @ApiOperation(value = "Record 변경", nickname = "zonesZoneRecordsRecordPut", notes = "", response = Record.class, tags={ "dns", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Record.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/zones/{zone}/records/{record}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Record> zonesZoneRecordsRecordPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Record body
,@ApiParam(value = "zone name",required=true) @PathVariable("zone") String zone
,@ApiParam(value = "record name",required=true) @PathVariable("record") String record
);

}
